// Note: "common.gradle" in the root project contains additional initialization
//   for this project. This initialization is applied in the "build.gradle"
//   of the root project.

// NetBeans will automatically add "run" and "debug" tasks relying on the
// "mainClass" property. You may however define the property prior executing
// tasks by passing a "-PmainClass=<QUALIFIED_CLASS_NAME>" argument.
//
// Note however, that you may define your own "run" and "debug" task if you
// prefer. In this case NetBeans will not add these tasks but you may rely on
// your own implementation.
//apply plugin: 'application'

String mavenGroupId = 'LQ-APP'
String mavenArtifactId = name
String mavenVersion = '1.0.3-SNAPSHOT'
version = mavenVersion
group = mavenGroupId



//mainClassName = 'com.leqi.client.app.LQApplication'
configurations { providedCompile }

sourceSets {
    main {
        compileClasspath += configurations.providedCompile
    }
    test {
        compileClasspath += configurations.providedCompile
        runtimeClasspath += configurations.providedCompile
    }
}

if (!hasProperty('mainClass')) {
    ext.mainClass = 'com.leqi.client.app.LQApplication'
}

task myRun(type: JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    main =  'com.leqi.client.app.LQApplication'
}

dependencies {
    providedCompile files("${System.env['JAVA_HOME']}/jre/lib/ext/jfxrt.jar")

    compile project(':LQ-CLIENT-FW')

}

def libFolder = 'libs'
def includePattern = 'lib/*.jar'
def javaFxHome = "${System.properties['java.home']}";
def antJavaFxJar = "$javaFxHome/../lib/ant-javafx.jar"
ant.importBuild 'javafx.xml'
ant.antJavaFxJar =antJavaFxJar
ant.mainClassName = ext.mainClass
ant.fallbackClassName = 'com.javafx.main.NoJavaFXFallback'
ant.distDir = libsDir
ant.distName = jar.archiveName;
ant.resourceDir = libFolder
ant.resourceIncludePattern = includePattern
ant.applicationTitle = 'LQApp' + '-' + mavenVersion//mavenArtifactId+'-'+mavenVersion
ant.applicationVendor = 'vendor'
ant.applicationVersion = version
ant.applicationClasses = sourceSets.main.output.classesDir
ant.applicationResources = sourceSets.main.output.resourcesDir
ant.roperties = 'img/le.png'

task copyJars(name:"copyJars",type: Copy) {
    //    println("-------------------003 copyJars ")
    from configurations.compile
    into 'libs' // 目标位置
}



jar {
    doFirst {
        copyJars.execute()
    }
    doLast {
        exportJar.execute()
    }
}
build {
    doLast{
        String tmpFileName = jar.archiveName
        String project_jar_path = libsDir.absolutePath + "/" + tmpFileName
        def f = file(project_jar_path)
        if(f.exists()){
            f.delete()
        }
    }
}

clean {
    doFirst {
        def libDirFile = file(libFolder)
        def libFiles = libDirFile.listFiles()
        libFiles.collect { 
            relativePath(it) 
        }.sort().each {
            file(it).delete()
        }
    }
}